Operating System:
From 0 to 1

Tu, Do Hoang

Table of Contents

    Preface
        Why another book on Operating System?
        Prerequisites
        What you will learn in this book
        What this book is not about
        The organization of the book
        Acknowledgments
Part I Preliminary
    Domain documents
        Problem domains
        Documents for implementing a problem dom
            Software Requirement Document
            Software Specification
        Documents for writing an x86 Operating S
        The physical implementation of a bit
            MOSFET transistors
        Beyond transistors: digital logic gates
            The theory behind logic gates
            Logic Gate implementation: CMOS circuit
        Beyond Logic Gates: Machine Language
            Machine language
            Assembly Language
            Programming Languages
        Abstraction
            Why abstraction works
            Why abstraction reduces complexity
    Computer Architecture
        What is a computer?
            Server
            Desktop Computer
            Mobile Computer
            Game Consoles
            Embedded Computer
            Field Gate Programmable Array
            Application-Specific Integrated Circuit
        Computer Architecture
            Instruction Set Architecture
            Computer organization
            Hardware
        x86 architecture
        Intel Q35 Chipset
        x86 Execution Environment
    x86 Assembly and C
        objdump
        Reading the output
        Intel manuals
        Experiment with assembly code
        Anatomy of an Assembly Instruction
        Understand an instruction in detail
        Example: jmp instruction
        Examine compiled data
            Fundamental data types
            Pointer Data Types
            Bit Field Data Type
            String Data Types
        Examine compiled code
            Data Transfer
            Expressions
            Stack
            Automatic variables
            Function Call and Return
            Loop
            Conditional
    The Anatomy of a Program
        Reference documents:
        ELF header
        Section header table
        Understand Section in-depth
        Program header table
        Segments vs sections
    Runtime inspection and debug
        A sample program
        Static inspection of a program
            Command: info target/info file/info file
            Command: maint info sections
            Command: info functions
            Command: info variables
            Command: disassemble/disas
            Command: x
            Command: print/p
        Runtime inspection of a program
            Command: run
            Command: break/b
            Command: next/n
            Command: step/s
            Command: ni
            Command: si
            Command: until
            Command: finish
            Command: bt
            Command: up
            Command: down
            Command: info registers
        How debuggers work: A brief introduction
            How breakpoints work
            Single stepping
            How a debugger understands high level so
Part II Groundwork
    Bootloader
        x86 Boot Process
        Using BIOS services
        Boot process
        Example Bootloader
        Compile and load
            Debugging
        Loading a program from bootloader
            Floppy Disk Anatomy
            Read and load sectors from a floppy disk
        Improve productivity with scripts
            Automate build with GNU Make
            GNU Make Syntax summary
            Automate debugging steps with GDB script
    Linking and loading on bare metal
        Understand relocations with readelf
            Offset
            Info
            Type
            Sym.Value
            Sym. Name
        Crafting ELF binary with linker scripts
            Example linker script
            Understand the custom ELF structure
            Manipulate the program segments
        C Runtime: Hosted vs Freestanding
        Debuggable bootloader on bare metal
        Debuggable program on bare metal
            Loading an ELF binary from a bootloader
            Debugging the memory layout
            Testing the new binary
Part III Kernel Programming
    x86 Descriptors
        Basic operating system concepts
            Hardware Abstraction Layer
            System programming interface
            The need for an Operating System
        Drivers
        Userspace and kernel space
        Memory Segment
        Segment Descriptor
        Types of Segment Descriptors
            Code and Data descriptors
            Task Descriptor
            Interrupt Descriptor
        Descriptor Scope
            Global Descriptor
            Local Descriptor
        Segment Selector
        Enhancement: Bootloader with descriptors
    Process
        Concepts
        Process
            Task
            Process
            Scheduler
            Context switch
            Priority
            Preemptive vs Non-preemptive
            Process states
            procfs
        Threads
        Task: x86 concept of a process
        Task Data Structure
            Task State Segment
            Task Descriptor
        Process Implementation
            Requirements
            Major Plan
            Stage 1: Switch to a task from bootloade
            Stage 2: Switch to a task with one funct
            Stage 3: Switch to a task with many func
        Milestone: Code Refactor
    Interrupt
    Memory management
            Address Space
            Virtual Memory
    File System
            Example: Ex2 filesystem
    Bibliography
