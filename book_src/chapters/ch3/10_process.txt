Process

  Concepts

  Process

  Task

A task is a unit of work that an OS needs to do, similar to how
human have tasks to do daily. From a user point of view, a task
for a computer to do can be web browsing, document editing,
gaming, sending and receiving emails... Since a CPU can only
execute sequentially, one instruction after another (fetching
from main memory), there must be some way to do many meaningful
tasks at once. For that reason, the computer must share the
resources e.g. registers, stack, memory... between tasks, since
we have many tasks but single and limited resources.

  Process

Process is a data structure that keeps track of the execution
state of a task. Task is a general concept, and process is the
implementation of a task. In a general-purpose OS, a task is
usually a program. For example, when you run Firefox, a process
structure is created to keep track of where the stack and the
heap allocated for firefox are, where Firefox's code area is and
which instruction EIP is holding to execute next... The typical
process structure looks like this:

[insert process image]

Process is a virtual computer, but much more primitive than the
virtual machine in virtualization software like Virtual Box, and
that's a good thing. Imagine having to run a full-fledged virtual
machine for every task; how wasteful of machine resources that
would be.. In the view of a running process, its code executes as
if it runs directly on hardware. Each process has its own set of
register values, which are kept tracked by the OS, and its own
contiguous virtual memory space (which is discontiguous in actual
physical memory). The code in a process is given virtual memory
addresses to read and write from.

[ illustrate: - a process looks like a mini Von Neumann - with
contiguous memory, each with a color; each cell of a process
mapped to distant memory cell in physical memory ]

A process can run so much until the OS tells it to temporary stop
for other tasks to use the hardware resources. The suspended
process can then wait until further notice from the OS. This
whole switching process is so fast that a computer user think his
computer actually runs tasks in parallel. The program that does
the switching between tasks is called a *scheduler*.

  Scheduler

An OS needs to perform a wide range of different functionalities,
e.g. web browsing, document editing, gaming... A scheduler
decides which tasks got to run before the others and, for how
long, in an efficient manner. Scheduler enables your computer to
become a time sharing system, because tasks share CPU execution
time and no one process can monopolize the CPU (in practice, it
still happens regularly). Without a scheduler, only a single task
can be performed at a time.

  Context switch

When a process is prepared to be switched out for another process
to take its place, certain hardware resources i.e. current open
files, current register values... must be backed up to later
resume that process's execution.

  Priority

Priority is an important metric for OS to decide which task is
scheduled to run before the others to allocate appropriate CPU
execution time for each task.

  Preemptive vs Non-preemptive

A preemptive OS can interrupt an executing process and switch to
another process.

A non-preemtive OS, a task runs until its completion.

  Process states

State is a particular condition of a process, triggered by an
action from the scheduler. A process goes through various states
during its life cycle. A process typically has these states:

  Run indicating CPU is executing code in this process.

  Sleep (or Suspended): indicating CPU is executing some process
  else.

  Destroyed: process is done and waiting to be destroyed
  completely.

  procfs

  Threads

Threads are units of work inside a process that shares the
execution environment. A process creates a whole new execution
environment with code of its own:

[illustration between process and thread, with each process is a
big rectangle box and threads nested boxes point to different
code region]

Instead of creating a completely new process structure in memory,
OS simply let the thread uses some of the resources of the parent
process that created it. A thread has its own registers, program
counter, stack pointer, and its own call stack. Everything else
is shared between the threads, such as an address space, heap,
static data, and code segments, and file descriptors. Because
thread simply reuses existing resources and involve no context
switching, it is much faster to create and switch between
processes.

However, note that the above scheme is just an implementation of
thread concept. You can completely treat thread the same as
process (hence you can call all processes threads and vice
versa). Or you can just back up some resources, whlie leaving
some resources shared. It's up to the OS designer to distinguish
between threads and processes. Threads are usually implemented as
a component of a process.

On Linux, a thread is simply a process that shares resources with
its parent process; for that reason, a Linux thread is also
called *light-weight process*. Or put it another way, a thread in
Linux is merely an implementation of a single-threaded process
that execute its main program code. A multi-threaded program in
Linux is just a process with shared with its single-threaded
children processes, each points to different code region of its
parent process.

[TODO: turn the above table into a diagram]

On Windows, threads and processes are two separated entities, so
the above description for Linux does not apply. However, the
general idea: a thread shares the execution environment, holds.

  Task: x86 concept of a process

  Task Data Structure

  Task State Segment

  Task Descriptor

  Process Implementation

  Requirements

  Major Plan

  Stage 1: Switch to a task from bootloader

  Stage 2: Switch to a task with one function from kernel

  Stage 3: Switch to a task with many functions from kernel

To implement the concept of a process, a kernel needs to be able
to save and restore its machine states for different tasks.

  Description

  [Describe task switching mechanism involving LDT and GDT]

  qasdfasdf asd

  Constraints

  Design

  ImplementationÂ plan

  Milestone: Code Refactor
