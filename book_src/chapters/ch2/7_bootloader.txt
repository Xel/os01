Groundwork

Bootloader<chap:Bootloader>

A bootloader loads an OS, or an application [footnote:
Many embedded devices don't use an OS. In embedded systems, the
bootloader is simply included in boot firmware and no bootloader
is needed.
] that runs and communicate directly with hardware. To run an OS,
the first thing to write is a bootloader. In this chapter, we are
going to write a rudimentary bootloader, as our main focus is
writing an operating system, not a bootloader. More
interestingly, this chapter will present related tools and
techniques that are applicable for writing a bootloader as well
as an operating system.

  x86 Boot Process

After the POST process finished, the CPU's program counter is set
to the address FFFF:0000h for executing BIOS code. BIOS - Basic
Input/Output System is a firmware that performs hardware
initialization and provides a set of generic subroutines to
control input/output devices. The BIOS checks all available
storage devices (floppy disks and hard disks) if any device is
bootable, by examining the last two bytes of the first sector
whether it has the boot record signature of 0x55, 0xAA. If so,
the BIOS loads the first sector to the address 7C00h, set the
program counter to that address and let the CPU executing code
from there.

The first sector is called Master Boot Record, or MBR. The
program in the first sector is called MBR Bootloader.

  Using BIOS services

BIOS provides many basic services for controlling the hardware at
the boot stage. A service is a group of routines that controls a
particular hardware device, or returns information of current
system. Each service is given an interrupt number. To call a BIOS
routine, an int instruction must be used with an interrupt
number. Each BIOS service defines its own numbers for its
routines; to call a routine, a specific number must be written to
a register required by each service. The list of all BIOS
interrupts is available with Ralf Brown's Interrupt List at: http://www.cs.cmu.edu/~ralf/files.html
.

[float Figure:


[Figure 0.19:
The boot process.
]

     <Graphics file: C:/Users/Tu Do/os01/book_src/images/07/simple_boot_process.pdf>

]

  Example: Interrupt call 13h (diskette service) requires number
  of sectors to read, track number, sector number, head number
  and drive number to read from a storage device. The content of
  the sector is stored in memory at the address defined by the
  pair of registers ES:BX. The parameters are stored in registers
  like this:

  ; Store sector content in the buffer 10FF:0000

mov     dx, 10FFh

mov     es, dx

xor     bx, bx

mov     al, 2    ; read 2 sector

mov     ch, 0    ; read track 0

mov     cl, 2    ; 2nd sector is read

mov     dh, 0    ; head number

mov     dl, 0    ; drive number. Drive 0 is floppy drive.

mov     ah, 0x02 ; read floppy sector function

int     0x13     ; call BIOS - Read the sector

The BIOS is only available in real mode. However, when switching
to protected mode, then BIOS will not be usable anymore and the
operating system code is responsible for controlling hardware
devices. This is when the operating system stands on its own: it
must provide its own kernel drivers for talking to hardware.

  Boot process

1. BIOS transfers control to MBR bootloader by jumping to
  0000:7c00h, where bootloader is assumed to exist already.

2. Setup machine environment for booting by properly initialize
  segment registers to enable flat memory model.

3. Load the kernel:

  (a) Read kernel from disk.

  (b) Save it somewhere in the main memory.

  (c) Jump to the starting code address of the kernel and
    execute.

4. If error occurs, print a message to notify users something
  went wrong and halt.

  Example Bootloader

Here is a simple bootloader that does nothing, except not
crashing the machine but halt it gracefully. If the virtual
machine does not halt but text repeatedly flashing, it means the
bootloader does not load properly and the machine crashed. The
machine crashed because it keeps executing until the near end of
physical memory (1 MB in real mode), which is FFFF:0000h, which
starts the whole BIOS boot process all over again. This is
effectively a reset, but not fully, since machine environment
from previous run is still reserved. For that reason, it is
called a warm reboot. The opposite of warm reboot is cold reboot,
in which the machine environment is reset to initial settings
when the computer starts from a powerless state.

;******************************************

; Bootloader.asm

; A Simple Bootloader

;******************************************

bits 16

start: jmp boot



;; constant and variable definitions

msg	db	"Welcome to My Operating System!", 0ah, 0dh, 0h



boot:

  cli	; no interrupts

  cld	; all that we need to init

  hlt	; halt the system



; We have to be 512 bytes. Clear the rest of the bytes with 0

times 510 - ($-$$) db 0

dw 0xAA55				  ; Boot Signiture

  Compile and load

We compile the code with nasm and write it to a disk image:



$ nasm -f bin bootloader.asm -o bootloader



Then, we create a 1.4 MB floppy disk and:



$ dd if=/dev/zero of=disk.img bs=512 count=2880





2880+0 records in

2880+0 records out

1474560 bytes (1.5 MB, 1.4 MiB) copied, 0.00625622 s, 236 MB/s



Then, we write the bootloader to the 1[superscript:st]sector:



$ dd conv=notrunc if=bootloader of=disk.img bs=512 count=1 seek=0





1+0 records in

1+0 records out

512 bytes copied, 0.000102708 s, 5.0 MB/s



The option conv=notrunc preserves the original size of the floppy
disk. Without this option, the 1.4 MB disk image will be
completely replaced by the new disk.img with only 512 bytes, and
we do not want that happens.

In the past, developing an operating system is complicated
because a programmer needs to understand specific hardware he is
using. Even though x86 was ubiquitous, the minute differences
between models made some code written for a machine not run on
another. Further, if you use the same physical computer you write
your operating system take very long between runs, and also
difficult to debug. Fortunately, today we can uniformly produce a
virtual machine with a particular specification and avoid the
incompatibility issue altogether, thus making an OS easier to
write and test since everyone can reproduce the same machine
environment.

We will be using QEMU, a generic and open source machine emulator
and virtualizer. QEMU can emulate various types of machine, not
limited to x86_64 only. Debug is easy since you can connect GDB
to a virtual machine to debug code that runs on it, through
QEMU's built-in GDB server. QEMU can use disk.img as a boot
device e.g. a floppy disk:



$ qemu-system-i386 -machine q35 -fda disk.img -gdb tcp::26000 -S



• With option -machine q35, QEMU emulates a q35 machine model
  from Intel.[footnote:
The following command lists all supported emulated machines from
QEMU:

qemu-system-i386 -machine help
].

• With option -fda disk.img, QEMU uses disk.img as a floppy disk
  image.

• With option -gdb tcp::26000, QEMU allows gdb to connect to the
  virtual machine for remote debugging through a tcp socket with
  port 26000.

• With option -S, QEMU waits for gdb to connect before it starts
  running.

After the command is executed, a new console window that displays
the screen output of the virtual machine. Open another terminal,
run gdb and set the current architecture to i386, since we are
running in 16-bit mode:



(gdb) set architecture i8086





warning: A handler for the OS ABI "GNU/Linux" is not built into
this configuration

of GDB. Attempting to continue with the default i8086 settings.

The target architecture is assumed to be i8086



Then, connect gdb to the waiting virtual machine with this
command:



(gdb) target remote localhost:26000





Remote debugging using localhost:26000

0x0000fff0 in ?? ()



Then, place a breakpoint at 0x7c00:



(gdb) b *0x7c00





Breakpoint 1 at 0x7c00



Note the before the memory address. Without the asterisk, gdb
treats the address as a symbol in a program rather than an
address. Then, for convenience, we use a split layout for viewing
the assembly code and registers together:



(gdb) layout asm

(gdb) layout reg



Finally, run the program:



(gdb) c



If the virtual machine successfully runs the bootloader, this is
what the QEMU screen should look like:

[float Figure:
[Figure 0.20:
Boot succeeded.
]

<Graphics file: C:/Users/Tu Do/os01/book_src/images/07/boot_succeeded.png>
]

  Debugging

If, for some reason, the sample bootloader cannot get to such
screen and gdb does not stop at 0x7c00, then the following
scenarios are likely:

• The bootloader is invalid: the message “Boot failed: not a
  bootable disk” appears for floppy disk booting. Make sure the
  boot signature is at the last 2 bytes of the 512-byte first
  sector.

• The machine cannot find a boot disk: the message “Boot failed:
  not a bootable disk” appears for floppy disk booting. Make sure
  the bootloader is correctly written to the first sector. It can
  be verify by check the disk with hd:



  $ hd disk.img | less



  If the first 512 bytes are all zeroes, then it is likely that
  the bootloader is incorrectly written to another sector.

• The machine crashes: When such scenario happens, it reset back
  to the beginning at FFFF:0000h. If the QEMU machine starts
  without waiting for gdb, then the console output window keeps
  flashing as the machine is repeatedly reset. It is likely some
  instruction in the bootloader code causing the fault.


-------------------------------------------


Print a welcome message

  We loaded the bootloader successfully. But, it needs to do
  something useful other than halting our machine. The easiest
  thing to do is printing something on screen, like how an
  introduction to all programming language starts with “Hello
  World”. Our bootloader prints “Welcome to my operating system”[footnote:
Or whatever message you want.
]. In this part, we will build a simple I/O library that allows
  us to set a cursor anywhere on the screen and print text there.

  First, create a file io.asm for I/O related routines. Then,
  write the following routines:

  1. MovCursor

    Purpose: Move a cursor to a specific location on screen and
    remember this location.

    Parameters:

    • bh = Y coordinate

    • bl = X coordinate.

    Return: None

  2. PutChar

    Purpose: Print a character on screen, at the cursor position
    previously set by MovCursor .

    Parameters:

    • al = Character to print

    • bl = text color

    • cx = number of times the character is repeated

    Return: None

  3. Print

    Purpose: Print a string.

    Parameters:

    • ds:si = Zero terminated string

    Return: None

  Test the routines by putting each in the bootloader source,
  compile and run. To debug, run GDB and set a breakpoint at a
  specific routine. The end result is that Print should display a
  welcome message on screen.


-------------------------------------------


  Loading a program from bootloader

Now that we get the feel of how to use the BIOS services, it is
time for something more complicated. We will place our kernel on
2[superscript:nd] sector onward, and our bootloader reads 30 sectors starting from
2[superscript:nd] sector. Why 30 sectors? Our kernel will grow gradually, so we
will preserve 30 sectors and save us time for modifying the
bootloader each time the kernel size expands another sector.

The primary responsibility of a bootloader is to read an
operating system from some storage device e.g. hard disk, then
loads it into main memory and transfer the control to the loaded
operating system, similar to how the BIOS reads and loads a
bootloader. At the moment, our bootloader does nothing more than
just an assembly program loaded by the BIOS. To make our
bootloader a real one, it must perform well the above two tasks:
read and load an operating system.

  Floppy Disk Anatomy

To read from a storage device, we must understand how the device
works, and the provided interface for controlling it. First of
all, a floppy disk is a storage device, similar to RAM, but can
store information even when a computer is turned off, thus is
called persistent storage device[margin:
persistent storage device
]persistent storage device. A floppy disk also a persistent
storage device, thus it provides a storage space up to 1.4 MB, or
1,474,560 bytes. When reading from a floppy disk, the smallest
unit that can be read is a sectorsector, a group of 512
contiguous bytes. A group of 18 sectors is a tracktrack. Each
side of a floppy disk consists of 80 tracks. A floppy drive is
required to read a floppy disk. Inside a floppy drive contains an
arm with 2 heads, each head reads a side of a floppy drive; head
0 writes the upper side and head 1 writes the lower side of a
floppy disk.

[float MarginFigure:


[MarginFigure 8:
Sector and Track.
]

     <Graphics file: C:/Users/Tu Do/os01/book_src/images/07/Disk-structure.pdf>

]

When a floppy drive writes data to a brand new floppy disk, track
0 on the upper side is written first, by head 0. When the upper
track 0 is full, the lower track 0 is used by head 1. When both
the upper and lower side of a track 0 are full, it goes back to
head 0 for writing data again, but this time the upper side of
track 1 and so on, until no space left on the device. The same
procedure is also applied for reading data from floppy disk.[float MarginFigure:


[MarginFigure 9:
Floppy disk platter with 2 sides.
]

<Graphics file: C:/Users/Tu Do/os01/book_src/images/07/Disk_heads.pdf>
]

  Read and load sectors from a floppy disk<sub:Read-and-load>

First, we need to a sample program for writing into the 2[superscript:nd] sector, so we can experiment with floppy disk reading:

;******************************************

; sample.asm

; A Sample Program

;******************************************

mov eax, 1

add eax, 1

Such a program is good enough. To simplify and for the purpose of
demonstration, we will use the same floppy disk that holds the
bootloader to hold our operating system. The operating system
image starts from the 2[superscript:nd] sector, as the 1[superscript:st] sector is already in use by the bootloader. We compile and write
it to the 2[superscript:nd] sector with dd:



$ nasm -f bin sample.asm -o sample

$ dd if=sample of=disk.img bs=512 count=1 seek=0



[float Figure:


[Figure 0.21:
The bootloader and the sample program on floppy disk.
]


+---------------------------+---------------------------+------------+---------------------------+
| 1[superscript:st] sector  | 2[superscript:nd] sector  |   .....    | 30[superscript:th] sector |
+---------------------------+---------------------------+------------+---------------------------+
|        bootloader         |          sample           |   ....     |          (empty)          |
+---------------------------+---------------------------+------------+---------------------------+

]

Next, we need to fix the bootloader for reading from the floppy
disk and load a number of arbitrary sectors. Before doing so, a
basic understanding of floppy disk is required. To read data from
disk, interrupt 13 with AH = 02 is a routine for reading sectors
from disk into memory:

AH = 02

AL = number of sectors to read (1-128 dec.)

CH = track/cylinder number (0-1023 dec., see below)

CL = sector number (1-17 dec.)

DH = head number (0-15 dec.)

DL = drive number (0=A:, 1=2nd floppy, 80h=drive 0, 81h=drive 1)

ES:BX = pointer to buffer



Return:

   AH = status (see INT 13,STATUS)

   AL = number of sectors read

   CF = 0 if successful

      = 1 if error

Apply the above routine, the bootloader can read the 2[superscript:nd] sector:

;******************************************

; Bootloader.asm

; A Simple Bootloader

;******************************************

bits 16

start: jmp boot



;; constant and variable definitions

  msg	db	"Welcome to My Operating System!", 0ah, 0dh, 0h



boot:

  cli	; no interrupts

  cld	; all that we need to init



  mov	ax, 0x50



  ;; set the buffer

  mov	es, ax

  xor	bx, bx



  mov	al, 2					; read 2 sector

  mov	ch, 0					; track 0

  mov	cl, 2					; sector to read (The second sector)

  mov	dh, 0					; head number

  mov	dl, 0					; drive number



  mov	ah, 0x02			     ; read sectors from disk

  int	0x13					 ; call the BIOS routine

  jmp	0x50:0x0				; jump and execute the sector!



  hlt	; halt the system



  ; We have to be 512 bytes. Clear the rest of the bytes with 0

times 510 - ($-$$) db 0

dw 0xAA55				  ; Boot Signiture

The above code jumps to the address 0x50:00 (which is 0x500). To
test the code, load it on a QEMU virtual machine and connect
through gdb, then place a breakpoint at 0x500. If gdb stops at
the address, with the assembly listing is the same code as in
sample.asm, then the bootloader successfully loaded the program.
This is an important milestone, as we ensure that our operating
system are loaded and ran properly.

  Improve productivity with scripts

  Automate build with GNU Make

Up to this point, the whole development process felt repetitive:
whenever a change is made, the same commands are entered again.
The commands are also complex. Ctrl+r helps, but it still feels
tedious.

GNU Make is a program that controls and automates the process of
building a complex software. For a small program, like a single C
source file, invoking gcc is quick and easy. However, soon your
software will be more complex, with multiples spanning multiple
directories, it is a chore to manually build and link files. To
solve such problem, a tool was created to automate away this
problem and is called a build system. GNU Make is one such of
tools. There are various build systems out there, but GNU Make is
the most popular in Linux world, as it is used for building the
Linux kernel.

For a comprehensive introduction to make, please refer to the
official Introduction to Make:
https://www.gnu.org/software/make/manual/html_node/Introduction.html#Introduction
. And that's enough for our project. You can also download the
manual in different formats e.g. PDF from the official manual
page: https://www.gnu.org/software/make/manual/ .

With Makefile, we can build simpler commands and save time:

all: bootloader bootdisk



bootloader:

	nasm -f bin bootloader.asm -o bootloader.o



kernel:

	nasm -f bin sample.asm -o bootloader.o



bootdisk: bootloader.o kernel.o

	dd if=/dev/zero of=disk.img bs=512 count=2880

	dd conv=notrunc if=bootloader.o of=disk.img bs=512 count=1
seek=0

	dd conv=notrunc if=sample.o of=disk.img bs=512 count=1 seek=1

Now, with a single command, we can build from start to finish a
disk image with a bootloader at 1[superscript:st]sector and the sample program at 2[superscript:nd]sector:



$ make bootdisk





nasm -f bin bootloader.asm -o bootloader.o

nasm -f bin sample.asm -o bootloader.o

dd if=/dev/zero of=disk.img bs=512 count=2880

2880+0 records in

2880+0 records out

1474560 bytes (1.5 MB, 1.4 MiB) copied, 0.00482188 s, 306 MB/s

dd conv=notrunc if=bootloader.o of=disk.img bs=512 count=1 seek=0

0+1 records in

0+1 records out

10 bytes copied, 7.0316e-05 s, 142 kB/s

dd conv=notrunc if=sample.o of=disk.img bs=512 count=1 seek=1

0+1 records in

0+1 records out

10 bytes copied, 0.000208375 s, 48.0 kB/s



Looking at the Makefile, we can see a few problems:

First, the name disk.img are all over the place. When we want to
change the disk image name e.g. floppy_disk.img, all the places
with the name disk.img must be changed manually. To solve this
problem, we use a variable, and every appearance of disk.img is
replaced with the reference to the variable. This way, only one
place that is changed - the variable definition - all other
places are updated automatically. The following variables are
added:

BOOTLOADER=bootloader.o

OS=sample.o

DISK_IMG=disk.img.o

The second problem is, the name bootloader and sample appears as
part of the filenames of the source files e.g. bootloader.asm and
sample.asm, as well as the filenames of the binary files e.g.
bootloader and sample. Similar to disk.img, when a name changed,
every reference of that name must also be changed manually for
both the names of the source files and the names of the binary
files e.g. if we change bootloader.asm to loader.asm, then the
object file bootloader.o needs changing to loader.o. To solve
this problem, instead of changing filenames manually, we create a
rule that automatically generate the filenames of one extension
to another. In this case, we want any source file that starts
with .asm to have its equivalent binary files, without any
extension e.g. bootloader.asm \rightarrow
 bootloader.o. Such
transformation is common, so GNU Make provides built-in
functions: wildcard and patsubst for solving such problems:

BOOTLOADER_SRCS := $(wildcard *.asm)

BOOTLOADER_OBJS := $(patsubst %.asm, %.o, $(BOOTLOADER_SRCS))

wildcard matches any .asm file in the current directory, then
assigned the list of matched files into the variable
BOOTLOADER_SRCS. In this case, BOOTLOADER_SRCS is assigned the
value:

bootloader.asm sample.asm

patsubst substitutes any filename starts with .asm into a
filename .o e.g. bootloader.asm \rightarrow
 bootloader.o. After
patsubsts runs, we get a list of object files in BOOTLOADER_OBJS:

bootloader.o sample.o

Finally, a recipe for building from .asm to .o are needed:

%.o: %.asm

	nasm -f bin $< -o $@

• $< is a special variable that refers to the input of the
  recipe: %.asm.

• $@ is a special variable that refers to the output of the
  recipe: %.o.

When the recipe is executed, the variables are replaced with the
actual values. For example, if a transformation is bootloader.asm
\rightarrow
 bootloader.o, then the actual command executed when
replace the placeholders in the recipe is:

nasm -f bin bootloader.asm -o bootloader.o

With the recipe, all the .asm files are built automatically with
the nasm command into .o files and we no longer need a separate
recipe for each object files. Putting it all together with the
new variables, we get a better Makefile:[float MarginFigure:
[MarginFigure 10:
A better project layout
]<project-layout>

.

├── bootloader

│   └── bootloader.asm

│   └── Makefile

├── build

│   ├── bootloader

│   │   └── bootloader.o

│   ├── disk.img

│   └── os

│       └── sample.o

├── Makefile

└── os

    ├── Makefile

    └── sample.asm

The layout can be displayed with tree command:

$ tree
]

BOOTLOADER=bootloader.o

OS=sample.o

DISK_IMG=disk.img



BOOTLOADER_SRCS := $(wildcard *.asm)

BOOTLOADER_OBJS := $(patsubst %.asm, %.o, $(BOOTLOADER_SRCS))



all: bootdisk



%.o: %.asm

	nasm -f bin $< -o $@



bootdisk:  $(BOOTLOADER_OBJS)

	dd if=/dev/zero of=$(DISK_IMG) bs=512 count=2880

	dd conv=notrunc if=$(BOOTLOADER) of=$(DISK_IMG) bs=512 count=1
seek=0

	dd conv=notrunc if=$(OS) of=$(DISK_IMG) bs=512 count=1 seek=1

From here on, any .asm file is compiled automatically, without an
explicit recipe for each file.

The object files are in the same directory as the source files,
making it more difficult when working with the source tree.
Ideally, object files and source files should live in different
directories. We want a better organized directory layout like
Figure [project-layout].

bootloader/ directory holds bootloader source files; os/ holds
operating system source files that we are going to write later;
build/ holds the object files for both the bootloader, the os and
the final disk image disk.img. Notice that bootloader/ directory
also has its own Makefile. This Makefile will be responsible for
building everything in bootloader/ directory, while the top-level
Makefile is released from the burden of building the bootloader,
but only the disk image. The content of the Makefile in
bootloader/ directory should be:

BUILD_DIR=@|\color{blue}\bfseries ../build/|@bootloader



BOOTLOADER_SRCS := $(wildcard *.asm)

BOOTLOADER_OBJS := $(patsubst %.asm, $(BUILD_DIR)/%.o,
$(BOOTLOADER_SRCS))



all: $(BOOTLOADER_OBJS)



$(BUILD_DIR)/%.o: %.asm

	nasm -f bin $< -o $@[float MarginFigure:
[MarginFigure 11:
Makefile in bootloader/
]

.

├── bootloader

│   └── bootloader.asm

│   └── Makefile

├── build

│   ├── bootloader

│   │   └── bootloader.o

│   ├── disk.img

│   └── os

│       └── sample.o

├── Makefile

└── os

    ├── Makefile

    └── sample.asm
]

Basically everything related to the bootloader in the top-level
Makefile are extracted into this Makefile. When make runs this
Makefile, bootloader.o should be built and put into ../build/
directory. As a good practice, all references to ../build/ go
through BUILD_DIR variable. The recipe for transforming from .asm
\rightarrow
 .o is also updated with proper paths, else it will
not work.

• %.asm refers to the assembly source files in the current
  directory.

• $(BUILD_DIR)/%.o refers to the output object files in the build
  directory in the path ../build/.

The entire recipe implements the transformation from
<source_file.asm> \rightarrow
 ../build/<object_file.o>. Note
that all paths must be correct. If we try to build object files
in a different directory e.g. current directory, it will not work
since there is no such recipe exists to build objects at such a
path.

We also create a similar Makefile for os/ directory:[float MarginFigure:
[MarginFigure 12:
Makefile in os/
]

.

├── bootloader

│   └── bootloader.asm

│   └── Makefile

├── build

│   ├── bootloader

│   │   └── bootloader.o

│   ├── disk.img

│   └── os

│       └── sample.o

├── Makefile

└── os

    ├── Makefile

    └── sample.asm
]

BUILD_DIR=../build/os



OS_SRCS := $(wildcard *.asm)

OS_OBJS := $(patsubst %.asm, $(BUILD_DIR)/%.o, $(OS_SRCS))



all: $(OS_OBJS)



$(BUILD_DIR)/%.o: %.asm

	nasm -f bin $< -o $@

For now, it looks almost identical to the Makefile for
bootloader. In the next chapter, we will update it for C code.
Then, we update the top-level Makefile:[float MarginFigure:
[MarginFigure 13:
Top-level Makefile
]

.

├── bootloader

│   └── bootloader.asm

│   └── Makefile

├── build

│   ├── bootloader

│   │   └── bootloader.o

│   ├── disk.img

│   └── os

│       └── sample.o

├── Makefile

└── os

    ├── Makefile

    └── sample.asm
]

BUILD_DIR=build

BOOTLOADER=$(BUILD_DIR)/bootloader/bootloader.o

OS=$(BUILD_DIR)/os/sample.o

DISK_IMG=disk.img



all: bootdisk



.PHONY: bootdisk bootloader os



bootloader:

	make -C bootloader



os:

	make -C os



bootdisk: bootloader os

	dd if=/dev/zero of=$(DISK_IMG) bs=512 count=2880

	dd conv=notrunc if=$(BOOTLOADER) of=$(DISK_IMG) bs=512 count=1
seek=0

	dd conv=notrunc if=$(OS) of=$(DISK_IMG) bs=512 count=1 seek=1

The build process is now truly modularized:

• bootloader and os builds are now delegated to child Makefile of
  respective components. -C option tells make to execute with a
  Makefile in a supplied directory. In this case, the directories
  are bootloader/ and os/.

• The target all of the top-level Makefile is only responsible
  for bootdisk target, which is the primary target of this
  Makefile.

In many cases, a target is not always a filename, but is just a
name for a recipe to be always executed when requested. If a
filename is of the same name as a target and the file is
up-to-date, make does not execute the target. To solve this
problem, .PHONY specifies that some targets are not files. All
phony targets will then run when requested, regardless of files
of the same names.

To save time entering the command for starting up a QEMU virtual
machine, we also add a target to the top-level Makefile:

qemu:

	qemu-system-i386 -machine q35 -fda $(DISK_IMG) -gdb tcp::26000
-S

One last problem is project cleaning. At the moment, object files
need removing manually and this is a repetitive process. Instead,
let the Makefile of each component takes care of cleaning its
object files, then top-level Makefile performs project cleaning
by calling the component Makefile to do the jobs. Each Makefile
is added with a clean target at the end:

• Bootloader Makefile:

  clean:

	rm $(BUILD_DIR)/*

• OS Makefile:

  clean:

	rm $(BUILD_DIR)/*

• Top-level Makefile:

  clean:

	make -C bootloader clean

	make -C os clean

Simply invoking make clean at the project root, all object files
the are removed.

  GNU Make Syntax summary

GNU Make, at its core, is a domain-specific language for build
automation. As any programming language, it needs a way to define
data and code. In a Makefile, variables carry data. A variable
value is either hard coded or evaluated from invoking a shell
such as Bash. All variable values in Make has the same type: a
string of text. Number 3 is not a number, but textual
representation of the symbol 3. Here are common ways how to
define data in a Makefile:


+------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Syntax                                                                                         | Description                                                                                                                                                                                                                                                                                |
+------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| A = 1

B = 2

C = $$(expr $(A) + $(B))


⇒ A is 1, B is 2, C is 3.                             | Declare a variable and assign a textual value to it. the double
dollar sign $$ means the enclosing expression evaluating by a
shell, defined by /bin/sh. In this case, the enclosing expression
is (expr $(A) + $(B)) and is evaluated by Bash.
                                        |
+------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| PATH = /bin

PATH := $PATH:/usr/bin


⇒ PATH is /bin/:/usr/bin                                 | Declare a variable and assign to it. However, the difference is
that the = syntax does not allow refer to a variable to use
itself as a value in the right hand side, while this syntax does.
                                                                                           |
+------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| PATH = /bin

PATH += /usr/bin


⇒ PATH is /bin/:/usr/bin                                       | Append a new value at the end of a variable. Equivalent to:

PATH := $PATH:/usr/bin
                                                                                                                                                                                                      |
+------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| CFLAGS ?= -o


⇒ CFLAGS is assigned the value -o if it was not defined.                        | This syntax is called conditional reference. Set a variable to a
value if it is undefined. This is useful if a user wants to
supply different value for a variable from the command line e.g.
add debugging option to CFLAGS. Otherwise, Make uses the default
defined by ?=.
         |
+------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| SRCS = lib1.c lib2.c main.c

OBJS := $(SRC:.o=.c)


⇒ OBJS has the value lib1.o lib2.o main.o  | This syntax is called substitution reference. A part of
referenced variable is replaced with something else. In this
case, all the .c extension is replaced by .o extension, thus
creating a list of object files for OBJS variable from the list
of source files from SRCS variable.
 |
+------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


Code in GNU Make is a collection of recipes that it can run. Each
recipe is analogous to a function in a programming language, and
can be called like a regular function. Each recipe carries a
series of shell commands to be executed by a shell e.g. Bash. A
recipe has the following format:

target: prerequisites

	command

Each target is analogous to a function name. Each prerequisite is
a call another target. Each command is one of Make's built-in
commands or a command that is executable by a shell. All
prerequisites must be satisfied before entering main body of target
; that is, each prerequisite must not return any error. If any
error is returned, Make terminates the whole build process and
prints an error on the command line.

Each time make runs, by default if no target is supplied, it
starts with all target, go through every prerequisites and
finally the body of all. all is analogous to main in other
programming languages. However, if make is given a target, it
will start from that target instead of main. This feature is
useful to automate multiple aspects in a project. For example,
one target is for building the project, one target is for
generating the documents e.g. test reports, another target for
running the whole test suite and all runs every main targets.



  Automate debugging steps with GDB script<sub:Automate-debugging-steps>

For the convenience, we save GDB configuration to .gdbinit file
at the project root directory. This configuration is just a
collection of GDB commands and a few extra commands. When gdb
runs, it first loads the .gdbinit file at home directory, then
the .gdbinit file at the current directory. Why shouldn't we put
commands in ~/.gdbinit? Because these commands are specific to
only this projec e.g. not all programs are required a remote
connection.

Our first configuration:

define hook-stop

    # Translate the segment:offset into a physical address

    printf "[%4x:%4x] ", $cs, $eip

    x/i $cs*16+$eip

end

The above script displays the memory address in [segment:offset]
format, which is necessary for debugging our bootloader and
operating system code.

It is better to use Intel syntax:

set disassembly-flavor intel

The following commands set a more convenient layout for debugging
assembly code:

layout asm

layout reg

We are currently debugging bootloader code, so it is a good idea
to first set it to 16-bit:

set architecture i8086

Every time the QEMU virtual machine starts, gdb must always
connect to port 26000. To avoid the trouble of manually
connecting to the virtual machine, add the command:

target remote localhost:26000

Debugging the bootloader needs a breakpoint at 0x7c00, where our
bootloader code starts:

b *0x7c00

Now, whenever gdb starts, it automatically set correct
architecture based on code, automatically connects to the virtual
machine[footnote:
The QEMU virtual machine should have already been started.
], displays output in a convenient layout and set a necessary
breakpoint. All that need to do is run the program.
