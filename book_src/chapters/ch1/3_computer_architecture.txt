Computer Architecture

To write lower level code, a programmer must understand the
architecture of a computer. It is similar to when one writes
programs in a software framework, he must know what kinds of
problems the framework solves, and how to use the framework by
its provided software interfaces. But before getting to the
definition of what computer architecture is, we must understand
what exactly is a computer, as many people still think that a
computer is a regular computer we put on a desk, or at best, a
server. Computers come in various shapes and sizes and are
devices that people never imagine they are computers, and that
code can run on such devices.

  What is a computer?

A [margin:
computer
]computercomputer is a hardware device that consists of at least
a processor (CPU), a memory device and input/output interfaces.
All the computers can be grouped into two types:

  Single-purpose computer is a computer built at the hardware
  level for specific tasks. For example, dedicated application
  encoders/decoders , timer, image/video/sound processors.

  General-purpose computer is a computer that can be programmed
  (without modifying its hardware) to emulate various features of
  single-purpose computers.

  Server

A server[margin:
server
]server is a general-purpose high-performance computer with huge
resources to provide large-scale services for a broad audience.
The audience are people with their personal computer connected to
a server.

[float Figure:
[Figure 0.8:
Blade servers. Each blade server is a computer with a modular
design optimize for the use of physical space and energy. The
enclosure of blade servers is called a chassis.(Source: [https://commons.wikimedia.org/wiki/File:Wikimedia_Foundation_Servers-8055_35.jpg||Wikimedia]
, author: Victorgrigas)
]

     <Graphics file: C:/Users/Tu Do/os01/book_src/images/03/Wikimedia_Foundation_Servers-8055_35.jpg>

]

  Desktop Computer

A [margin:
desktop computer
]desktop computerdesktop computer is a general-purpose computer
with an input and output system designed for a human user, with
moderate resources enough for regular use. The input system
usually includes a mouse and a keyboard, while the output system
usually consists of a monitor that can display a large mount of
pixels. The computer is enclosed in a chassis large enough for
putting various computer components such as a processor, a
motherboard, a power supply, a hard drive, etc.

[float Figure:
[Figure 0.9:
A typical desktop computer.
]

     <Graphics file: C:/Users/Tu Do/os01/book_src/images/03/computer-158675.svg>

]

  Mobile Computer

A mobile computer[margin:
mobile computer
]mobile computer is similar to a desktop computer with fewer
resources but can be carried around.



  Game Consoles

Game consoles are similar to desktop computers but are optimized
for gaming. Instead of a keyboard and a mouse, the input system
of a game console are game controllers, which is a device with a
few buttons for controlling on-screen objects; the output system
is a television. The chassis is similar to a desktop computer but
is smaller. Game consoles use custom processors and graphic
processors but are similar to ones in desktop computers. For
example, the first Xbox uses a custom Intel Pentium III
processor.



Handheld game consoles are similar to game consoles, but
incorporate both the input and output systems along with the
computer in a single package.



  Embedded Computer

An [margin:
embedded computer
]embedded computerembedded computer is a single-board or
single-chip computer with limited resources designed for
integrating into larger hardware devices. [float MarginFigure:
[MarginFigure 5:
An Intel 82815 Graphics and Memory Controller Hub embedded on a
PC motherboard. (Source: [https://commons.wikimedia.org/wiki/File:Intel_82815_GMCH.jpg||Wikimedia]
, author: Qurren)
]

     <Graphics file: C:/Users/Tu Do/os01/book_src/images/03/Intel_82815_GMCH.jpg>

][float MarginFigure:
[MarginFigure 6:
A PIC microcontroller. (Soure: [http://www.microchip.com/wwwproducts/en/PIC18F4620||Microchip]
)
]

     <Graphics file: C:/Users/Tu Do/os01/book_src/images/03/medium-PIC18F4620-PDIP-40.png>

]

A [margin:
microcontroller
]microcontrollerMicrocontroller is an embedded computer designed
for controlling other hardware devices. A microcontroller is
mounted on a chip. Microcontrollers are general-purpose
computers, but with limited resources so that it is only able to
perform one or a few specialized tasks. These computers are used
for a single purpose, but they are still general-purpose since it
is possible to program them to perform different tasks, depends
on the requirements, without changing the underlying hardware.

Another type of embedded computer is system-on-chip. A
system-on-chipsystem-on-chip is a full computer on a single chip.
Though a microcontroller is housed on a chip, its purpose is
different: to control some hardware. A microcontroller is usually
simpler and more limited in hardware resources as it specializes
only in one purpose when running, whereas a system-on-chip is a
general-purpose computer that can serve multiple purposes. A
system-on-chip can run like a regular desktop computer that is
capable of loading an operating system and run various
applications. A system-on-chip typically presents in a
smartphone, such as Apple A5 SoC used in Ipad2 and iPhone 4S, or
Qualcomm Snapdragon used in many Android phones.[float MarginFigure:


[MarginFigure 7:
Apple A5 SoC
]

     <Graphics file: C:/Users/Tu Do/os01/book_src/images/03/128px-Apple_A5_Chip.jpg>

]

Be it a microcontroller or a system-on-chip, there must be an
environment where these devices can connect to other devices.
This environment is a circuit board called a PCBPCB -- Printed Circuit Board
Printed Circuit Board. A printed circuit boardPrinted Circuit Board
 is a physical board that contains lines and pads to enable
electron flows between electrical and electronics components.
Without a PCB, devices cannot be combined to create a larger
device. As long as these devices are hidden inside a larger
device and contribute to a larger device that operates at a
higher level layer for a higher level purpose, they are embedded
devices. Writing a program for an embedded device is therefore
called embedded programmingembedded programming. Embedded
computers are used in automatically controlled devices including
power tools, toys, implantable medical devices, office machines,
engine control systems, appliances, remote controls and other
types of embedded systems.



The line between a microcontroller and a system-on-chip is
blurry. If hardware keeps evolving more powerful, then a
microcontroller can get enough resources to run a minimal
operating system on it for multiple specialized purposes. In
contrast, a system-on-chip is powerful enough to handle the job
of a microcontroller. However, using a system-on-chip as a
microcontroller would not be a wise choice as price will rise
significantly, but we also waste hardware resources since the
software written for a microcontroller requires little computing
resources.

  Field Gate Programmable Array

[margin:
Field Programmable Gate Array
]Field Programmable Gate ArrayField Gate Programmable Array (FPGA
FPGA) is a hardware an array of reconfigurable gates that makes
circuit structure programmable after it is shipped away from the
factory[footnote:
This is why it is called Field Gate Programmable Array. It is
changeable “in the field” where it is applied.
]. Recall that in the previous chapter, each 74HC00 chip can be
configured as a gate, and a more sophisticated device can be
built by combining multiple 74HC00 chips. In a similar manner,
each FPGA device contains thousands of chips called logic blocks,
which is a more complicated chip than a 74HC00 chip that can be
configured to implement a Boolean logic function. These logic
blocks can be chained together to create a high-level hardware
feature. This high-level feature is usually a dedicated algorithm
that needs high-speed processing.

[float Figure:
[Figure 0.10:
FPGA Architecture (Source: [http://www.ni.com/tutorial/6097/en/||National Instruments]
)
]

     <Graphics file: C:/Users/Tu Do/os01/book_src/images/03/fpga_400x212.jpg>

]

Digital devices can be designed by combining logic gates, without
regarding actual circuit components, since the physical circuits
are just multiples of CMOS circuits. Digital hardware, including
various components in a computer, is designed by writing code,
like a regular programmer, by using a language to describe how
gates are wired together. This language is called a Hardware
Description LanguageHardware Description Language. Later the
hardware description is compiled to a description of connected
electronic components called a netlistnetlist, which is a more
detailed description of how gates are connected.

The difference between FPGA and other embedded computers is that
programs in FPGA are implemented at the digital logic level,
while programs in embedded computers like microcontrollers or
system-on-chip devices are implemented at assembly code level. An
algorithm written for a FPGA device is a description of the
algorithm in logic gates, which the FPGA device then follows the
description to configure itself to run the algorithm. An
algorithm written for a microcontroller is in assembly
instructions that a processor can understand and act accordingly.

FPGA is applied in the cases where the specialized operations are
unsuitable and costly to run on a regular computer such as
real-time medical image processing, cruise control system,
circuit prototyping, video encoding/decoding, etc. These
applications require high-speed processing that is not achievable
with a regular processor because a processor wastes a significant
amount of time in executing many non-specialized instructions -
which might add up to thousands of instructions or more - to
implement a specialized operation, thus more circuits at physical
level to carry the same operation. A FPGA device carries no such
overhead; instead, it runs a single specialized operation
implemented in hardware directly.

  Application-Specific Integrated Circuit

An Application-Specific Integrated CircuitApplication-Specific
Integrated Circuit (or ASICASIC) is a chip designed for a
particular purpose rather than for general-purpose use. ASIC does
not contain a generic array of logic blocks that can be
reconfigured to adapt to any operation like an FPGA; instead,
every logic block in an ASIC is made and optimized for the
circuit itself. FPGA can be considered as the prototyping stage
of an ASIC, and ASIC as the final stage of circuit production.
ASIC is even more specialized than FPGA, so it can achieve even
higher performance. However, ASICs are very costly to manufacture
and once the circuits are made, if design errors happen,
everything is thrown away, unlike the FPGA devices which can
simply be reprogrammed because of the generic gate array.

  Computer Architecture

The previous section examined various classes of computers.
Regardless of shapes and sizes, every computer is designed for an
architect from high level to low level.

Computer\,Architecture=Instruction\,Set\,Architecture+Computer\,Organization+Hardware


At the highest-level is the Instruction Set Architecture.

At the middle-level is the Computer Organization.

At the lowest-level is the Hardware.

  Instruction Set Architecture

An instruction setinstruction set is the basic set of commands
and instructions that a microprocessor understands and can carry
out.

An Instruction Set ArchitectureInstruction Set Architecture, or ISA
ISA, is the design of an environment that implements an
instruction set. Essentially, a runtime environment similar to
those interpreters of high-level languages. The design includes
all the instructions, registers, interrupts, memory models (how
memory are arranged to be used by programs), addressing modes,
I/O... of a CPU. The more features (e.g. more instructions) a CPU
has, the more circuits are required to implement it.

  Computer organization

[margin:
Computer organization
]Computer organizationComputer organization is the functional
view of the design of a computer. In this view, hardware
components of a computer are presented as boxes with input and
output that connects to each other and form the design of a
computer. Two computers may have the same ISA, but different
organizations. For example, both AMD and Intel processors
implement x86 ISA, but the hardware components of each processor
that make up the environments for the ISA are not the same.

Computer organizations may vary depend on a manufacturer's
design, but they are all originated from the Von Neumann
architecture[footnote:
John von Neumann was a mathematician and physicist who invented a
computer architecture.
]:

[float Figure:
[Figure 0.11:
Von-Neumann Architecture
]

 <Graphics file: C:/Users/Tu Do/os01/book_src/images/03/von_neumann_architecture.pdf>

]

  CPUCPU fetches instructions continuously from main memory and
  execute.

  MemoryMemory stores program code and data.

  BusBus are electrical wires for sending raw bits between the
  above components.

  I/O DevicesI/O Devices are devices that give input to a
  computer i.e. keyboard, mouse, sensor... and takes the output
  from a computer i.e. monitor takes information sent from CPU to
  display it, LED turns on/off according to a pattern computed by
  CPU...

The Von-Neumann computer operates by storing its instructions in
main memory, and CPU repeatedly fetches those instructions into
its internal storage for executing, one after another. Data are
transferred through a data bus between CPU, memory and I/O
devices, and where to store in the devices is transferred through
the address bus by the CPU. This architecture completely
implements the fetch -- decode -- executefetch -- decode --
execute cycle.

The earlier computers were just the exact implementations of the
Von Neumann architecture, with CPU and memory and I/O devices
communicate through the same bus. Today, a computer has more
buses, each is specialized in a type of traffic. However, at the
core, they are still Von Neumann architecture. To write an OS for
a Von Neumann computer, a programmer needs to be able to
understand and write code that controls the cores components:
CPU, memory, I/O devices, and bus.

CPUCPU, or Central Processing UnitCentral Processing Unit, is the
heart and brain of any computer system. Understand a CPU is
essential to writing an OS from scratch:

• To use these devices, a programmer needs to controls the CPU to
  use the programming interfaces of other devices. CPU is the
  only way, as CPU is the only direct device a programmer can use
  and the only device that understand code written by a
  programmer.

• In a CPU, many OS concepts are already implemented directly in
  hardware, e.g. task switching, paging. A kernel programmer
  needs to know how to use the hardware features, to avoid
  duplicating such concept in software, thus wasting computer
  resources.

• CPU built-in OS features boost both OS performance and
  developer productivity because those features are actual
  hardware, the lowest possible level, and developers are free to
  implement such features.

• To effectively use the CPU, a programmer needs to understand
  the documentation provided from CPU manufacturer. For example, [[http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html||Intel® 64 and IA-32 Architectures Software Developer Manuals]
  .

• After understanding one CPU architecture well, it is easier to
  learn other CPU architectures.

A CPU is an implementation of an ISA, effective the
implementation of an assembly language (and depends on the CPU
architecture, the language may vary). Assembly language is one of
the interfaces that are provided for software engineers to
control a CPU, thus control a computer. But how can every
computer device be controlled with only the access to the CPU?
The simple answer is that a CPU can communicate with other
devices through these two interfaces, thus commanding them what
to do:

  Registers Registers[margin:
Registers
]are a hardware component for high-speed data access and
  communication with other hardware devices. Registers allow
  software to control hardware directly by writing to registers
  of a device, or receive information from hardware device when
  reading from registers of a device.

  Not all registers are used for communication with other
  devices. In a CPU, most registers are used as high-speed
  storage for temporary data. Other devices that a CPU can
  communicate always have a set of registers for interfacing with
  the CPU.

  Port Port[margin:
Port
]is a specialized register in a hardware device used for
  communication with other devices. When data are written to a
  port, it causes a hardware device to perform some operation
  according to values written to the port. The different between
  a port and a register is that port does not store data, but
  delegate data to some other circuit.

These two interfaces are extremely important, as they are the
only interfaces for controlling hardware with software. Writing
device drivers is essentially learning the functionality of each
register and how to use them properly to control the device.

[margin:
Memory
]MemoryMemory is a storage device that stores information. Memory
consists of many cells. Each cell is a byte with its address
number, so a CPU can use such address number to access an exact
location in memory. Memory is where software instructions (in the
form of machine language) is stored and retrieved to be executed
by CPU; memory also stores data needed by some software. Memory
in a Von Neumann machine does not distinguish between which bytes
are data and which bytes are software instructions. It's up to
the software to decide, and if somehow data bytes are fetched and
executed as instructions, CPU still does it if such bytes
represents valid instructions, but will produce undesirable
results. To a CPU, there's no code and data; both are merely
different types of data for it to act on: one tells it how to do
something in a specific manner, and one is necessary materials
for it to carry such action.

The RAM is controlled by a device called a memory controllermemory controller
. Currently, most processors have this device embedded, so the
CPU has a dedicated memory bus connecting the processor to the
RAM. On older CPU[footnote:
Prior to the CPU's produced in 2009
], however, this device was located in a chip also known as MCH
or Memory Controller HubMemory Controller Hub. In this case, the
CPU does not communicate directly to the RAM, but to the MCH
chip, and this chip then accesses the memory to read or write
data. The first option provides better performance since there is
no middleman in the communications between the CPU and the
memory.



At the physical level, RAM is implemented as a grid of cells that
each contain a transistor and an electrical device called a [margin:
capacitor
]capacitorcapacitor, which stores charge for short periods of
time. The transistor controls access to the capacitor; when
switched on, it allows a small charge to be read from or written
to the capacitor. The charge on the capacitor slowly dissipates,
requiring the inclusion of a refresh circuit to periodically read
values from the cells and write them back after amplification
from an external power source.

Bus[margin:
Bus
]Bus is a subsystem that transfers data between computer
components or between computers. Physically, buses are just
electrical wires that connect all components together and each
wire transfer a single big of data. The total number of wires is
called bus width[margin:
bus width
]bus width, and is dependent on how many wires a CPU can support.
If a CPU can only accept 16 bits at a time, then the bus has 16
wires connecting from a component to the CPU, which means the CPU
can only retrieve 16 bits of data a time.

  Hardware

Hardware is a specific implementation of a computer. A line of
processors implement the same instruction set architecture and
use nearly identical organizations but differ in hardware
implementation. For example, the Core i7 family provides a model
for desktop computers that is more powerful but consumes more
energy, while another model for laptops is less performant but
more energy efficient. To write software for a hardware device,
seldom we need to understand a hardware implementation if
documents are available. Computer organization and especially the
instruction set architecture are more relevant to an operating
system programmer. For that reason, the next chapter is devoted
to study the x86 instruction set architecture in depth.

  x86 architecture

A chipsetchipset is a chip with multiple functions. Historically,
a chipset is actually a set of individual chips, and each is
responsible for a function, e.g. memory controller, graphic
controllers, network controller, power controller, etc. As
hardware progressed, the set of chips were incorporated into a
single chip, thus more space, energy, and cost efficient. In a
desktop computer, various hardware devices are connected to each
other through a PCB called a motherboardmotherboard. Each CPU
needs a compatible motherboard that can host it. Each motherboard
is defined by its chipset model that determine the environment
that a CPU can control. This environment typically consists of

• a slot or more for CPU

• a chipset of two chips which are the Northbridge and
  Southbridge chips

  – Northbridge chip is responsible for the high-performance
    communication between CPU, main memory and the graphic card.

  – Southbridge chip is responsible for the communication with
    I/O devices and other devices that are not performance
    sensitive.

• slots for memory sticks

• a slot or more for graphic cards.

• generic slots for other devices, e.g. network card, sound card.

• ports for I/O devices, e.g. keyboard, mouse, USB.

[float Figure:
[Figure 0.12:
Motherboard organization.
]<mobo-organization>

<Graphics file: C:/Users/Tu Do/os01/book_src/images/03/Motherboard_diagram.svg>
]

To write a complete operating system, a programmer needs to
understand how to program these devices. After all, an operating
system manages hardware automatically to free application
programs doing so. However, of all the components, learning to
program the CPU is the most important, as it is the component
present in any computer, regardless of what type a computer is.
For this reason, the primary focus of this book will be on how to
program an x86 CPU. Even solely focused on this device, a
reasonably good minimal operating system can be written. The
reason is that not all computers include all the devices as in a
normal desktop computer. For example, an embedded computer might
only have a CPU and limited internal memory, with pins for
getting input and producing an output; yet, operating systems
were written for such devices.

However, learning how to program an x86 CPU is a daunting task,
with 3 primary manuals written for it: almost 500 pages for
volume 1, over 2000 pages for volume 2 and over 1000 pages for
volume 3. It is an impressive feat for a programmer to master
every aspect of x86 CPU programming.

  Intel Q35 Chipset

Q35 is an Intel chipset released September 2007. Q35 is used as
an example of a high-level computer organization because later we
will use QEMU to emulate a Q35 system, which is latest Intel
system that QEMU can emulate. Though released in 2007, Q35 is
relatively modern to the current hardware, and the knowledge can
still be reused for current chipset model. With a Q35 chipset,
the emulated CPU is also relatively up-to-date with features
presented in current day CPUs so we can use the latest software
manuals from Intel.

Figure [mobo-organization] is a typical current-day motherboard
organization, in which Q35 shares similar organization.

  x86 Execution Environment

An execution environmentexecution environment is an environment
that provides the facility to make code executable. The execution
environment needs to address the following question:

• Supported operations? data transfer, arithmetic, control,
  floating-point...

• Where are operands stored? registers, memory, stack,
  accumulator

• How many explicit operands are there for each instruction? 0,
  1, 2, or 3

• How is the operand location specified? register, immediate,
  indirect, . . .

• What type and size of operands are supported? byte, int, float,
  double, string, vector...

• etc.

For the remain of this chapter, please carry on the reading to
chapter 3 in Intel Manual Volume 1, “Basic Execution Environment”.
